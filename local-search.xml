<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>os-lab2</title>
    <link href="/os-lab2.html"/>
    <url>/os-lab2.html</url>
    
    <content type="html"><![CDATA[<h2 id="一点点感想"><a href="#一点点感想" class="headerlink" title="一点点感想"></a>一点点感想</h2><p>首先，我们可以看到整个mos操作系统是一个逻辑非常完整的体系结构，通过一些巧妙的手段，实现了我以前的一些困惑，我对这个操作系统的编写者确实怀有很高的崇敬。其次，我们的助教确实辛苦，也很值得尊敬，在我写lab2过程中提供了很多帮助。最后对于os课程组有一点点抱怨，第一，在这个操作系统中，代码风格非常简陋，甚至出现了page2kva这样让人摸不着头脑的函数名，其次，虽然我们的助教认真负责，但是在指导书中有一些东西确实很难以领悟，不得不通过其他方式进行学习和揣摩。</p><h2 id="lab2概述"><a href="#lab2概述" class="headerlink" title="lab2概述"></a>lab2概述</h2><p>lab2中，主要进行了对操作系统的页式内存管理和tlb的代码实现，主要难点还是在链表宏的编写和页式内存管理的理解，接下来我会主要根据这两个方面编写博客。</p><h2 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h2><h3 id="exercise2-1"><a href="#exercise2-1" class="headerlink" title="exercise2.1"></a>exercise2.1</h3><p>exercise2.1内容不难，但是主要有两点<br>第一是这里遗漏了一个条件，根据往年的指导书，我们可以在include&#x2F;mmu.h中找到BY2PG(byte to page)和PGSHIFT(12)这两个条件，表明页的大小是4kb<br>第二个是，和往届代码不同，这里通过从外设读取硬件可用内存大小，往届是直接给出，但是从结果上看，都是64MB<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">mips_detect_memory</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-comment">/* Step 1: Initialize memsize. */</span><br>          memsize = *(<span class="hljs-keyword">volatile</span> u_int *)(KSEG1 | DEV_MP_ADDRESS | DEV_MP_MEMORY);<br>          <span class="hljs-comment">/* Step 2: Calculate the corresponding &#x27;npage&#x27; value. */</span><br>          <span class="hljs-comment">/* Exercise 2.1: Your code here. */</span><br>          npage = memsize &gt;&gt; PGSHIFT;<br>          printk(<span class="hljs-string">&quot;Memory size: %lu KiB, number of pages: %lu\n&quot;</span>, memsize / <span class="hljs-number">1024</span>, npage);<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="exercise2-2"><a href="#exercise2-2" class="headerlink" title="exercise2.2"></a>exercise2.2</h3><p><em>2.2到2.5的实验中都是实现链表法管理内存的，页是存储在kseg0上面的，而结构体Page是页控制块，页控制块构成了页的空闲链表，通过对于链控制块的操分配和回收实现页的分配和回收</em><br>exercise2.2主要是对这个链表的理解，我认为这个链表的功能确实强大，构建思维确实巧妙。首先我们要知道执行宏的过程，对于宏的翻译，可以理解成直接将文本进行替换。其次，LIST_ENTRY这个结构体进行一下更明确的阐述。我们不妨设Page是一个结构体(在这里使用这个是因为接下来的内容需要用到，但是其他结构体也可以使用),在这个结构体中，LIST_ENTRY是其中的一个内容，在LIST_ENTRY中le_next指向下一个链表中下一个Page，而le_prev指向的是上一个Page结构体中的LIST_ENTRY中的le_next。这样根据指导书上的图片就不难理解了。<br>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LIST_INSERT_AFTER(listelm, elm, field)                                                     \</span><br><span class="hljs-meta">         do &#123;                                                            \</span><br><span class="hljs-meta">                 LIST_NEXT((elm),field) = LIST_NEXT((listelm),field);    \</span><br><span class="hljs-meta">                 <span class="hljs-keyword">if</span> ( LIST_NEXT((listelm),field) != NULL )               \</span><br><span class="hljs-meta">                         (LIST_NEXT((elm),field))-&gt;field.le_prev = &amp;LIST_NEXT((elm),field);      \</span><br><span class="hljs-meta">                 LIST_NEXT((listelm),field) = elm;                       \</span><br><span class="hljs-meta">                 (elm)-&gt;field.le_prev = &amp;LIST_NEXT((listelm),field);     \</span><br><span class="hljs-meta">         &#125; while (0)  </span><br></code></pre></td></tr></table></figure><p>tips:</p><ul><li>因为是宏编写，所以必须要使用do while(0) ，不必要的括号以及行尾的\，至于原因，可以参考预习教程中的c语言拾遗一节</li><li>建议将include&#x2F;queue.h中的所有有关LIST的函数全部看一下实现过程，对之后的实验特别有帮助</li></ul><h3 id="exercise2-3"><a href="#exercise2-3" class="headerlink" title="exercise2.3"></a>exercise2.3</h3><p><strong>接下来的所有内容中，我们需要搞清楚进行操作的是物理地址还是虚拟地址，否则在进行后续实验中将出现非常大的困扰</strong><br>首先我们要明确一个问题，页是存储在kseg0段的，页的分配是从低地址向高地址一页一页分配，而如果我们阅读过alloc的代码就可以发现，freemem的地址是随着分配的页数而增加的。换句话说，freemem之下是分配过的页面，是正在使用的，freemem之上的页面是未使用过的，可以被分配的。但是我们需要知道freemem之下有多少内存空间，fremem之上有多少内存空间。这个时候用freemem减去kseg0地址(将高位清零)，得到的就是freemem之下内存数，这个正好对应freemem物理地址，可以通过PADDR来实现。至于上限是什么可以通过2.1中的npage来记录。注意，不要忘记将freemem进行页内存的对齐。<br>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">page_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>         <span class="hljs-comment">/* Step 1: Initialize page_free_list. */</span><br>         <span class="hljs-comment">/* Hint: Use macro `LIST_INIT` defined in include/queue.h. */</span><br>         <span class="hljs-comment">/* Exercise 2.3: Your code here. (1/4) */</span><br>         LIST_INIT(&amp;page_free_list);<br>         <span class="hljs-comment">/* Step 2: Align `freemem` up to multiple of BY2PG. */</span><br>         <span class="hljs-comment">/* Exercise 2.3: Your code here. (2/4) */</span><br>         ROUND(freemem,BY2PG);<br>         <span class="hljs-type">int</span> i =PADDR(freemem) / BY2PG<span class="hljs-number">-1</span>;<br>         <span class="hljs-keyword">for</span>( i ; i &gt;= <span class="hljs-number">0</span>;i--)<br>                 (*(pages + i)).pp_ref = <span class="hljs-number">1</span>;<br>         <span class="hljs-comment">/* Step 3: Mark all memory below `freemem` as used (set `pp_ref` to 1) */</span><br>         <span class="hljs-comment">/* Exercise 2.3: Your code here. (3/4) */</span><br>         <span class="hljs-keyword">for</span>(i = PADDR(freemem) / BY2PG ;i &lt; npage;i++)<br>         &#123;<br>                 (*(pages + i)).pp_ref = <span class="hljs-number">0</span>;<br>                 LIST_INSERT_HEAD(&amp;page_free_list,pages + i,pp_link);<br>         &#125;<br>         <span class="hljs-comment">/* Step 4: Mark the other memory as free. */</span><br>        <span class="hljs-comment">/* Exercise 2.3: Your code here. (4/4) */</span><br> &#125;<br></code></pre></td></tr></table></figure><h3 id="exercise2-4"><a href="#exercise2-4" class="headerlink" title="exercise2.4"></a>exercise2.4</h3><p>首先我先列一下有些可能使用到的奇奇怪怪函数名的含义，这些函数之后可能用得上</p><ul><li>page2kva page to kernel virtual address</li><li>page2pa page to phsical address</li><li>pa2ka physical address to kernel address</li><li>ka2pa kernel address to physical address<br>分配页的核心思路是，判断链表是否为空，将链表头的页控制块对应的页清空，给new分配页地址，将链表中头元素移除。如果能正确理解页控制块和页的关系，这个不是很难。<br>代码如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">page_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Page **new)</span> &#123;<br>        <span class="hljs-comment">/* Step 1: Get a page from free memory. If fails, return the error code.*/</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Page</span> *<span class="hljs-title">pp</span>;</span><br>        <span class="hljs-comment">/* Exercise 2.4: Your code here. (1/2) */</span><br>        <span class="hljs-keyword">if</span>(LIST_EMPTY((&amp;page_free_list)))<br>                <span class="hljs-keyword">return</span> -E_NO_MEM;<br>        <span class="hljs-comment">/* Step 2: Initialize this page with zero.</span><br><span class="hljs-comment">        * Hint: use `memset`. */</span><br>        <span class="hljs-comment">/* Exercise 2.4: Your code here. (2/2) */</span><br>        pp = LIST_FIRST((&amp;page_free_list));<br>        <span class="hljs-built_in">memset</span>((<span class="hljs-type">void</span> *)(page2kva(pp)),<span class="hljs-number">0</span>,BY2PG);<br>        LIST_REMOVE(pp, pp_link);<br>        *new = pp;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="exercise2-5"><a href="#exercise2-5" class="headerlink" title="exercise2.5"></a>exercise2.5</h3><p>这道题目也很简单，直接上代码吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">page_free</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Page *pp)</span> &#123;<br>         assert(pp-&gt;pp_ref == <span class="hljs-number">0</span>);<br>         <span class="hljs-comment">/* Just insert it into &#x27;page_free_list&#x27;. */</span><br>         <span class="hljs-comment">/* Exercise 2.5: Your code here. */</span><br>         <span class="hljs-keyword">if</span> (pp-&gt;pp_ref == <span class="hljs-number">0</span>)<br>                 LIST_INSERT_HEAD(&amp;page_free_list,pp,pp_link);<br> &#125;<br></code></pre></td></tr></table></figure><p>其实if判断条件没什么太大用处，但是为了更加保险一点，就写了。</p><h3 id="exercise2-6"><a href="#exercise2-6" class="headerlink" title="exercise2.6"></a>exercise2.6</h3><p><strong>真正比较难的地方开始了</strong><br>其实exercise2.6和exercise2.7真正的核心就在于指导书的图2.4。简单补充一下指导书上面没有讲到的事情。这里感谢一下孙海龙老师，课上教怎么从虚拟地址映射到实际物理地址，我感觉如果他提前讲过或者我晚写完几天作业，就可以节省我三四个小时甚至更多的时间。<br>首先有一个基址寄存器，存的就是一级页表的最低位地址，程序中就是pgdir。首先我们要在一级页表中找到一级页表的对应的项，就是pgdir+PDX(va)，从这个地址中我们获取了对应的二级页表基地址。此时，我们图上出现了一个perm。<br>我之前有个疑问，就是怎么控制某一个页是否有效，是否可读可写。这里进行了解释，和二级页表基地址取出来的，还有权限位，由于二级页表同样是页式存储，所以二级页表也有权限位。二级页表的基地址只占前20位，后12位肯定为0，用后20位作为权限位。所以用在include&#x2F;mmu.h有PTE_V,PTED等，不难发现，这些都是2的幂次方，也就是说，反映在二进制上就是某一位是1，其他都是0，判断能否对一个页进行某种操作时，就用对应的操作和perm做与运算即可。比如我们判断某一页是不是可用，需要进行PTBase &amp; PTE_V，如果得出的结果是1，就是可用，0就是不可用。<br>同样，我们在插入一个二级页表中，也需要更改权限位，比如使某一个页面可用，就需要进行PTBase | PTE_V.<br>图中由PTBase | perm 引向 PTBase | PTX | va的意思并不是通过PTBase | perm通过转换得到PTBase | PTX | va，而是通过PTBase得到PTBase | PTX | va，perm只不过是权限位<br>基本原理是这样的，先看代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pgdir_walk</span><span class="hljs-params">(Pde *pgdir, u_long va, <span class="hljs-type">int</span> create, Pte **ppte)</span> &#123;<br>         Pde *pgdir_entryp;<br>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Page</span> *<span class="hljs-title">pp</span>;</span><br>         pgdir_entryp = pgdir + PDX(va);<br>         Pte *PTBase;<br>         <span class="hljs-comment">/*一级页表项中存储的是二级页表的物理基地址，首先对应到kseg0上，在对应到·虚拟地址*/</span><br>         <span class="hljs-comment">/*PTE_ADDR是将第十二位清空*/</span><br>         PTBase = KADDR(PTE_ADDR(*pgdir_entryp));<br>         <span class="hljs-comment">/*判断一级页表项中二级页表基地址是否可用*/</span><br>         <span class="hljs-keyword">if</span>(!(*pgdir_entryp &amp; PTE_V))<br>         &#123;<br>                 <span class="hljs-keyword">if</span>(create)<br>                 &#123;<br>                         <span class="hljs-keyword">if</span>(page_alloc(&amp;pp) == -E_NO_MEM)<br>                         &#123;<br>                                 *ppte = <span class="hljs-literal">NULL</span>;<br>                                 <span class="hljs-keyword">return</span> -E_NO_MEM;<br>                         &#125;<br>                         <span class="hljs-keyword">else</span><br>                         &#123;<br>                                 pp-&gt;pp_ref++;<br>                                 <span class="hljs-comment">/*二级页面基地址赋值为pp的地址并且将其转换为虚拟地址*/</span><br>                                 PTBase =page2pa(pp);<br>                                 *pgdir_entryp = PTBase;<br>                                 PTBase = KADDR(*pgdir_entryp);<br>                                 <span class="hljs-comment">/*设置权限位*/</span><br>                                 *pgdir_entryp = (*pgdir_entryp) | PTE_D | PTE_V;<br>                         &#125;<br>                &#125;<br>                 <span class="hljs-keyword">else</span><br>                 &#123;<br>                         *ppte = <span class="hljs-literal">NULL</span>;<br>                         <span class="hljs-keyword">return</span> -E_NO_MEM;<br>                 &#125;<br>         &#125;<br>         <span class="hljs-comment">/*找到二级页表对应的页的入口*/</span><br>         *ppte = PTBase + PTX(va);<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;b<br></code></pre></td></tr></table></figure><p>pgdir_walk这个写的确实很巧妙。这个实现了两个功能，查找存储va对应页面的二级页表的项，如果存在<strong>二级页表</strong>，就将ppte赋值项地址，如果不存在<strong>二级页表或这个二级页表不可用</strong>且create是1，就创建二级页表在找到项，将ppte赋值项地址，如果如果不存在<strong>二级页表或这个二级页表不可用</strong>且create是0，就返回错误信息。<br>具体顺序看代码注释。能力还是不太够，如果哪里有不明白的地方，就私信联系我吧。</p><h3 id="exercise2-7"><a href="#exercise2-7" class="headerlink" title="exercise2.7"></a>exercise2.7</h3><p>如果2.6能够理解明白2.7就不是很难的一个过程了。当我们二级页表中某一项为空或者需要将二级页表某一项置换成为近期所需要的页面时，就需要pgdir_insert，这个函数是将pp和va建立起一一映射。在这个过程中，需要考虑几个问题：</p><ul><li>va对应的那一页在二级页表中是否为空</li><li>如果空怎么办</li><li>不空的话有两种情况：里面的就是pp，里面的不是pp</li><li>如果是pp进行什么操作</li><li>如果不是pp进行什么操作<br>根据这些问题就能理解这段代码了：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">page_insert</span><span class="hljs-params">(Pde *pgdir, u_int asid, <span class="hljs-keyword">struct</span> Page *pp, u_long va, u_int perm)</span> &#123;<br>         Pte *pte;<br>         pgdir_walk(pgdir, va, <span class="hljs-number">0</span>, &amp;pte);<span class="hljs-comment">//查看va对应一页是不是空</span><br>         <span class="hljs-keyword">if</span> (pte &amp;&amp; (*pte &amp; PTE_V)) &#123;  <span class="hljs-comment">//不空</span><br>         <span class="hljs-comment">/*不是pp 就将这一页从页表中移除，之后当作空来处理*/</span><br>                 <span class="hljs-keyword">if</span> (pa2page(*pte) != pp) &#123;<br>                         page_remove(pgdir, asid, va);<br>                 &#125; <br>        <span class="hljs-comment">/*如果是pp，就先将pp这一页从tlb中取出，然后更改权限位</span><br><span class="hljs-comment">        这一个判断是用来更改权限位的，就算直接返回，测评也不会出错，但是不建议，因为有用*/</span><br>                 <span class="hljs-keyword">else</span> &#123;<br>                         tlb_invalidate(asid, va);<br>                         *pte = page2pa(pp) | perm | PTE_V;<br>                         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                 &#125;<br>         &#125;<br>         <span class="hljs-comment">/*如果空*/</span><br>         tlb_invalidate(asid,va);<span class="hljs-comment">//将va这一页从tlb中清理掉</span><br>         <span class="hljs-keyword">if</span>(pgdir_walk(pgdir,va,<span class="hljs-number">1</span>,&amp;pte) == -E_NO_MEM)<br>                 <span class="hljs-keyword">return</span> -E_NO_MEM;<br>        <span class="hljs-comment">//给pte中赋值</span><br>         *pte = (page2pa(pp) | perm | PTE_V);<br>         pp-&gt;pp_ref++;<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="exercise2-8"><a href="#exercise2-8" class="headerlink" title="exercise2.8"></a>exercise2.8</h3><p>2.8到2.10都是对于tlb的操作，这一块不是很难的部分<br>2.8很简单，直接添加两行代码，不做解释，直接看代码：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">LEAF(tlb_out)<br>   <span class="hljs-meta">.set</span> <span class="hljs-keyword">noreorder</span><br><span class="hljs-keyword"></span>           <span class="hljs-keyword">mfc0 </span>   <span class="hljs-built_in">t0</span>, CP0_ENTRYHI<br>           <span class="hljs-keyword">mtc0 </span>   <span class="hljs-built_in">a0</span>, CP0_ENTRYHI<br>           <span class="hljs-keyword">nop</span><br><span class="hljs-keyword"></span>          <span class="hljs-keyword">tlbp</span><br><span class="hljs-keyword"></span>          <span class="hljs-keyword">nop</span><br><span class="hljs-keyword"></span>          <span class="hljs-keyword">mfc0 </span>   <span class="hljs-built_in">t1</span>, CP0_INDEX<br>  <span class="hljs-meta">.set</span> reorder<br>          <span class="hljs-keyword">bltz </span>   <span class="hljs-built_in">t1</span>, NO_SUCH_ENTRY<br>  <span class="hljs-meta">.set</span> <span class="hljs-keyword">noreorder</span><br><span class="hljs-keyword"></span>          <span class="hljs-keyword">mtc0 </span>   <span class="hljs-built_in">zero</span>, CP0_ENTRYHI<br>          <span class="hljs-keyword">mtc0 </span>   <span class="hljs-built_in">zero</span>, CP0_ENTRYLO0<br>          <span class="hljs-keyword">nop</span><br><span class="hljs-keyword"></span>          <span class="hljs-keyword">tlbwi</span><br><span class="hljs-keyword"></span>          <span class="hljs-keyword">nop</span><br><span class="hljs-keyword"></span>  <span class="hljs-meta">.set</span> reorder<br></code></pre></td></tr></table></figure><h3 id="exercise2-9"><a href="#exercise2-9" class="headerlink" title="exercise2.9"></a>exercise2.9</h3><p>2.9其实也不是很难。这个函数的作用就是在va分配对应页面。至于pgdir_lookup说简单一点，就是找到va对应的页，并且将pte赋值为入口值。而passive_alloc核心就是两个，page_alloc(p)和pgdir_insert，同样这两个也是_do_tlb_refill的核心。<br>虽然这么说，但是我还还是觉得这个函数名实在起的有点不太合适，毕竟不是tlb的充填。<br>tips：建议看看pgdir_lookup的源代码<br>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">Pte _do_tlb_refill(u_long va, u_int asid) &#123;<br>          Pte *pte;<br>          <span class="hljs-keyword">while</span>(page_lookup(cur_pgdir,va,&amp;pte) == <span class="hljs-literal">NULL</span>)<br>          &#123;<br>                  passive_alloc(va,cur_pgdir,asid);<br>          &#125;<br>  <br>          <span class="hljs-keyword">return</span> *pte;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="exercise2-10"><a href="#exercise2-10" class="headerlink" title="exercise2.10"></a>exercise2.10</h3><p>这个函数才是对tlb的充填！！！！<br>代码就一行，不说了，具体过程看指导书<br>代码如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">NESTED(do_tlb_refill, <span class="hljs-number">0</span>, <span class="hljs-built_in">zero</span>)<br>          <span class="hljs-keyword">mfc0 </span>   <span class="hljs-built_in">a0</span>, CP0_BADVADDR<br>          <span class="hljs-keyword">mfc0 </span>   <span class="hljs-built_in">a1</span>, CP0_ENTRYHI<br>          <span class="hljs-keyword">srl </span>    <span class="hljs-built_in">a1</span>, <span class="hljs-built_in">a1</span>, <span class="hljs-number">6</span><br>          <span class="hljs-keyword">andi </span>   <span class="hljs-built_in">a1</span>, <span class="hljs-built_in">a1</span>, <span class="hljs-number">0</span>b111111<br>          <span class="hljs-keyword">sw </span>     <span class="hljs-built_in">ra</span>, tlb_refill_ra<br>          <span class="hljs-keyword">jal </span>    _do_tlb_refill<br>          <span class="hljs-keyword">lw </span>     <span class="hljs-built_in">ra</span>, tlb_refill_ra<br>          <span class="hljs-keyword">mtc0 </span>   <span class="hljs-built_in">v0</span>, CP0_ENTRYLO0<br>          <span class="hljs-keyword">nop</span><br><span class="hljs-keyword"></span>          <span class="hljs-keyword">tlbwr</span><br><span class="hljs-keyword"></span>  <br>          <span class="hljs-keyword">jr </span>     <span class="hljs-built_in">ra</span><br>  END(do_tlb_refill)<br></code></pre></td></tr></table></figure><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>完结撒花！！！！！！<br>lab2相对于lab1更难，代码量更大，也更不好理解，到现在我也有很多不理解的地方，用了四天时间才写完，又用了四天时间写完（虽然能早点，但是回宿舍以后好多时间都在看狂飙），不过终于更新完了。<br>但是由于本人是个菜菜，有些东西写的不太清楚，并且有错误，如果有不清楚或者不合适，不正确的地方就找我联系</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>os-lab1</title>
    <link href="/os-lab1.html"/>
    <url>/os-lab1.html</url>
    
    <content type="html"><![CDATA[<h2 id="lab1概述"><a href="#lab1概述" class="headerlink" title="lab1概述"></a>lab1概述</h2><p>在BUAA 操作系统的实验课上，主要通过GXemul来模拟裸机，从而实现编写一个mos操作系统</p><p>相比于前几届的实验课，就lab1而言，要简单一些，同时可以将前几届的mos操作系统作为参考，可以起到不错的提示和debug作用</p><p>在lab1中，从内核转移到内存开始实现，主要实现几个功能</p><ul><li>补全readelf文件，实现readelf</li><li>将内核加载到正确位置，不全kernel.lds代码</li><li>完成_start函数，找到mos内核启动入口</li><li>完成printk.c函数，实现输出功能</li></ul><h2 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h2><h3 id="exercise-1-1"><a href="#exercise-1-1" class="headerlink" title="exercise 1.1"></a>exercise 1.1</h3><p>这个练习本质上不难，只要分辨概念足可以做出题目。但是由于在操作系统课上，我们只是简单了解了elf文件的组成内容，但是并没有介绍节头表和段头表的内容，并且我认为节头表入口和段头表入口这两个概念在中文中不是经常被提及，所以容易产生问题</p><p>首先我们来了解节头表和段头表的概念和组成。节头表(section header table) 本质上是由若干个节头表(section header)组成，节头表不是一个结构体，相当于是节头表入口集合。节头表入口是一个结构体，在结构体中包含节头表入口的大小，和相对于elf表头的偏移量还有该节位置等信息，相当于是一个</p><p>指向每个节(section)的指针。并且在elf头表中，含有节头表入口的的大小，每个节头表入口大小是相同的，这是因为节头表入口时大小固定的结构体，如果想求出每个节头表入口的位置，可以通过offset(elf header) + offset-to-elfheader(section header table) + size(section header) * n来求</p><p>这是这道题的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;elf.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">/* Overview:</span><br><span class="hljs-comment"> *   Check whether specified buffer is valid ELF data.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Pre-Condition:</span><br><span class="hljs-comment"> *   The memory within [binary, binary+size) must be valid to read.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Post-Condition:</span><br><span class="hljs-comment"> *   Returns 0 if &#x27;binary&#x27; isn&#x27;t an ELF, otherwise returns 1.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_elf_format</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *binary, <span class="hljs-type">size_t</span> size)</span> &#123;<br>Elf32_Ehdr *ehdr = (Elf32_Ehdr *)binary;<br><span class="hljs-keyword">return</span> size &gt;= <span class="hljs-keyword">sizeof</span>(Elf32_Ehdr) &amp;&amp; ehdr-&gt;e_ident[EI_MAG0] == ELFMAG0 &amp;&amp;<br>       ehdr-&gt;e_ident[EI_MAG1] == ELFMAG1 &amp;&amp; ehdr-&gt;e_ident[EI_MAG2] == ELFMAG2 &amp;&amp;<br>       ehdr-&gt;e_ident[EI_MAG3] == ELFMAG3;<br>&#125;<br><br><span class="hljs-comment">/* Overview:</span><br><span class="hljs-comment"> *   Parse the sections from an ELF binary.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Pre-Condition:</span><br><span class="hljs-comment"> *   The memory within [binary, binary+size) must be valid to read.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Post-Condition:</span><br><span class="hljs-comment"> *   Return 0 if success. Otherwise return &lt; 0.</span><br><span class="hljs-comment"> *   If success, output the address of every section in ELF.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">readelf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *binary, <span class="hljs-type">size_t</span> size)</span> &#123;<br>Elf32_Ehdr *ehdr = (Elf32_Ehdr *)binary;<br><br><span class="hljs-comment">// Check whether `binary` is a ELF file.</span><br><span class="hljs-keyword">if</span> (!is_elf_format(binary, size)) &#123;<br><span class="hljs-built_in">fputs</span>(<span class="hljs-string">&quot;not an elf file\n&quot;</span>, <span class="hljs-built_in">stderr</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// Get the address of the section table, the number of section headers and the size of a</span><br><span class="hljs-comment">// section header.</span><br><span class="hljs-type">const</span> <span class="hljs-type">void</span> *sh_table;<br>Elf32_Half sh_entry_count;<br>Elf32_Half sh_entry_size;<br><span class="hljs-comment">/* Exercise 1.1: Your code here. (1/2) */</span><br>sh_table = binary + ehdr-&gt;e_shoff;<br>sh_entry_count = ehdr-&gt;e_shnum;<br>sh_entry_size = ehdr-&gt;e_shentsize;<br><span class="hljs-comment">// For each section header, output its index and the section address.</span><br><span class="hljs-comment">// The index should start from 0.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sh_entry_count; i++) &#123;<br><span class="hljs-type">const</span> Elf32_Shdr *shdr;<br>shdr = (Elf32_Shdr *)sh_table;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> addr;<br><span class="hljs-comment">/* Exercise 1.1: Your code here. (2/2) */</span><br>addr = shdr-&gt;sh_addr;<br>sh_table += sh_entry_size;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:0x%x\n&quot;</span>, i, addr);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>注意：在使用结构体的指针时，要是用-&gt;而不是.</p><h3 id="exercise-1-2"><a href="#exercise-1-2" class="headerlink" title="exercise 1.2"></a>exercise 1.2</h3><p>这道题其实不是很难，首先要找到kernel所存的位置即可，由于在cache为启动时，是能使用kseg0作为内核代码存放位置，并且在0x80000000-0x80010000位置存放的是exception entry，就可以明白，代码段和数据段被存储在0x80010000以上就好其实要明白在linker script中，’.’是一个定位计数器，是可以改变自身位置的。</p><p>这道题比较容易出现问题的点就是，一定要注意linker script的格式，等号两边以及冒号两边都有空格</p><p>代码如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Set the architecture to mips.</span><br><span class="hljs-comment"> */</span><br>OUTPUT_ARCH(mips)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Set the ENTRY point of the program to _start.</span><br><span class="hljs-comment"> */</span><br>ENTRY(_start)<br><br>SECTIONS &#123;<br><span class="hljs-comment">/* Exercise 3.10: Your code here. */</span><br><br><span class="hljs-comment">/* fill in the correct address of the key sections: text, data, bss. */</span><br><span class="hljs-comment">/* Exercise 1.2: Your code here. */</span><br>. = <span class="hljs-number">0x80010000</span>;<br><span class="hljs-meta">.text</span> : &#123;<br>*(<span class="hljs-meta">.text</span>)<br>&#125;<br><span class="hljs-meta">.data</span> : &#123;<br>*(<span class="hljs-meta">.data</span>)<br>&#125;<br>.<span class="hljs-keyword">bss </span>: &#123;<br>*(.<span class="hljs-keyword">bss)</span><br><span class="hljs-keyword"></span>&#125;<br><span class="hljs-keyword">bss_end </span>= .;<br>. = <span class="hljs-number">0x80400000</span>;<br>end = . ;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意一点就是，在上一届的操作系统实验课中，还为execption entry分配了地址空间，同时，还未.sdata段分配了空间。</p><h3 id="exercise1-3"><a href="#exercise1-3" class="headerlink" title="exercise1.3"></a>exercise1.3</h3><p>exercise1.3是完成mips体系结构下的start.S函数</p><p>在理论课上我们可以知道，在将内核放置到内存中正确的位置上以后，操作系统就要找到程序入口<em>start函数，之后进行一些初始化，包括初始化CP0寄存器，设置中断，还有设置栈指针等。本实验的</em>start函数中，只是简单的初始化了CP0寄存器，并且设置栈指针。我闷很容易有一个想法，就是我们借助上一个题目的kernel.lds中的位置关系，找到栈指针的位置。但是这样做是不现实的，同时是错误的。因为栈的增长方向是向低地址增长，堆的增长方向是向高地址增长，因此这里要将栈指针放到0x84000000上</p><p>所以代码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#include</span> &lt;asm/asm.h&gt;<br><span class="hljs-selector-id">#include</span> &lt;mmu.h&gt;<br><br><span class="hljs-selector-class">.text</span><br><span class="hljs-function"><span class="hljs-title">EXPORT</span><span class="hljs-params">(_start)</span></span><br><span class="hljs-function"><span class="hljs-title">LEAF</span><span class="hljs-params">(_start)</span></span><br><span class="hljs-selector-class">.set</span> at<br><span class="hljs-selector-class">.set</span> reorder<br><span class="hljs-comment">/* disable interrupts */</span><br>mtc0    zero, CP0_STATUS<br><br><span class="hljs-comment">/* hint: you can reference the memory layout in include/mmu.h */</span><br><span class="hljs-comment">/* set up the kernel stack */</span><br><span class="hljs-comment">/* Exercise 1.3: Your code here. (1/2) */</span><br><span class="hljs-selector-tag">li</span> sp,<span class="hljs-number">0</span>x80400000<br><span class="hljs-comment">/* jump to mips_init */</span><br><span class="hljs-comment">/* Exercise 1.3: Your code here. (2/2) */</span><br>jalmips_init<br><span class="hljs-function"><span class="hljs-title">END</span><span class="hljs-params">(_start)</span></span><br><br></code></pre></td></tr></table></figure><h2 id="exercise1-4"><a href="#exercise1-4" class="headerlink" title="exercise1.4"></a>exercise1.4</h2><p>其实这道题没什么要说的，只要顺序判断对了，其实不是很难。整个的流程图放在这里</p><pre class="mermaid">flowchart LRA(各个变量初始化) --> B(判断%或者\0的位置) --> |如果是\0|C(break)B --> |如果是%|D(fmt++) --> |如果开头是-|E(表示左对齐,fmt++)D --> |如果是0|F(则有前导零,fmt++)E  --> G(读取width)F --> G --> |判断是否有l|H(表示是不是长整/浮点型)</pre><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;print.h&gt;</span></span><br><span class="hljs-comment">/* forward declaration */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_char</span><span class="hljs-params">(<span class="hljs-type">fmt_callback_t</span>, <span class="hljs-type">void</span> *, <span class="hljs-type">char</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_str</span><span class="hljs-params">(<span class="hljs-type">fmt_callback_t</span>, <span class="hljs-type">void</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">print_num</span><span class="hljs-params">(<span class="hljs-type">fmt_callback_t</span>, <span class="hljs-type">void</span> *, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">char</span>, <span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">vprintfmt</span><span class="hljs-params">(<span class="hljs-type">fmt_callback_t</span> out, <span class="hljs-type">void</span> *data, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, va_list ap)</span> &#123;<br><span class="hljs-type">char</span> c;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *s;<br><span class="hljs-type">long</span> num;<br><br><span class="hljs-type">int</span> width;<br><span class="hljs-type">int</span> long_flag; <span class="hljs-comment">// output is long (rather than int)</span><br><span class="hljs-type">int</span> neg_flag;  <span class="hljs-comment">// output is negative</span><br><span class="hljs-type">int</span> ladjust;   <span class="hljs-comment">// output is left-aligned</span><br><span class="hljs-type">char</span> padc;     <span class="hljs-comment">// padding char</span><br><br><span class="hljs-keyword">for</span> (;;) &#123;<br><br>num = <span class="hljs-number">0</span>,width = <span class="hljs-number">0</span>,long_flag = <span class="hljs-number">0</span>,neg_flag = <span class="hljs-number">0</span>,ladjust = <span class="hljs-number">0</span>,padc = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((*fmt) != <span class="hljs-string">&#x27;%&#x27;</span> &amp;&amp; (*fmt) != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>&#123;<br>print_char(out,data,*fmt,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>fmt++;<br>&#125;<br><span class="hljs-keyword">if</span>((*fmt) == <span class="hljs-string">&#x27;\0&#x27;</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*fmt) == <span class="hljs-string">&#x27;%&#x27;</span>)<br>fmt++;<br><span class="hljs-keyword">if</span>((*fmt) == <span class="hljs-string">&#x27;-&#x27;</span>)<br>ladjust = <span class="hljs-number">1</span>,fmt++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*fmt) == <span class="hljs-string">&#x27;0&#x27;</span>)<br>padc = <span class="hljs-string">&#x27;0&#x27;</span>,fmt++;<br><span class="hljs-keyword">while</span>(((*fmt) &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; (*fmt) &lt;= <span class="hljs-string">&#x27;9&#x27;</span>))<br>&#123;<br>width = width * <span class="hljs-number">10</span> + (*fmt) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>fmt++;<br><span class="hljs-keyword">if</span>(padc == <span class="hljs-number">0</span>)<br>padc = <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><span class="hljs-keyword">if</span>((*fmt) == <span class="hljs-string">&#x27;l&#x27;</span>)<br>long_flag = <span class="hljs-number">1</span>,fmt++;<br><span class="hljs-comment">/* scan for the next &#x27;%&#x27; */</span><br><span class="hljs-comment">/* Exercise 1.4: Your code here. (1/8) */</span><br><br><span class="hljs-comment">/* flush the string found so far */</span><br><span class="hljs-comment">/* Exercise 1.4: Your code here. (2/8) */</span><br><br><span class="hljs-comment">/* check &quot;are we hitting the end?&quot; */</span><br><span class="hljs-comment">/* Exercise 1.4: Your code here. (3/8) */</span><br><br><span class="hljs-comment">/* we found a &#x27;%&#x27; */</span><br><span class="hljs-comment">/* Exercise 1.4: Your code here. (4/8) */</span><br><br><span class="hljs-comment">/* check format flag */</span><br><span class="hljs-comment">/* Exercise 1.4: Your code here. (5/8) */</span><br><br><span class="hljs-comment">/* get width */</span><br><span class="hljs-comment">/* Exercise 1.4: Your code here. (6/8) */</span><br><br><span class="hljs-comment">/* check for long */</span><br><span class="hljs-comment">/* Exercise 1.4: Your code here. (7/8) */</span><br><br>neg_flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">switch</span> (*fmt) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br><span class="hljs-keyword">if</span> (long_flag) &#123;<br>num = va_arg(ap, <span class="hljs-type">long</span> <span class="hljs-type">int</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>num = va_arg(ap, <span class="hljs-type">int</span>);<br>&#125;<br>print_num(out, data, num, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, width, ladjust, padc, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:<br><span class="hljs-keyword">if</span> (long_flag) &#123;<br>num = va_arg(ap, <span class="hljs-type">long</span> <span class="hljs-type">int</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>num = va_arg(ap, <span class="hljs-type">int</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Refer to other parts (case &#x27;b&#x27;, case &#x27;o&#x27;, etc.) and func &#x27;print_num&#x27; to</span><br><span class="hljs-comment"> * complete this part. Think the differences between case &#x27;d&#x27; and the</span><br><span class="hljs-comment"> * others. (hint: &#x27;neg_flag&#x27;).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* Exercise 1.4: Your code here. (8/8) */</span><br><span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>)<br>num = -num,neg_flag = <span class="hljs-number">1</span>;<br>print_num(out,data,num,<span class="hljs-number">10</span>,neg_flag,width,ladjust,padc,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;o&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;O&#x27;</span>:<br><span class="hljs-keyword">if</span> (long_flag) &#123;<br>num = va_arg(ap, <span class="hljs-type">long</span> <span class="hljs-type">int</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>num = va_arg(ap, <span class="hljs-type">int</span>);<br>&#125;<br>print_num(out, data, num, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, width, ladjust, padc, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;U&#x27;</span>:<br><span class="hljs-keyword">if</span> (long_flag) &#123;<br>num = va_arg(ap, <span class="hljs-type">long</span> <span class="hljs-type">int</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>num = va_arg(ap, <span class="hljs-type">int</span>);<br>&#125;<br>print_num(out, data, num, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, width, ladjust, padc, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br><span class="hljs-keyword">if</span> (long_flag) &#123;<br>num = va_arg(ap, <span class="hljs-type">long</span> <span class="hljs-type">int</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>num = va_arg(ap, <span class="hljs-type">int</span>);<br>&#125;<br>print_num(out, data, num, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, width, ladjust, padc, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;X&#x27;</span>:<br><span class="hljs-keyword">if</span> (long_flag) &#123;<br>num = va_arg(ap, <span class="hljs-type">long</span> <span class="hljs-type">int</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>num = va_arg(ap, <span class="hljs-type">int</span>);<br>&#125;<br>print_num(out, data, num, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, width, ladjust, padc, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>c = (<span class="hljs-type">char</span>)va_arg(ap, <span class="hljs-type">int</span>);<br>print_char(out, data, c, width, ladjust);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>s = (<span class="hljs-type">char</span> *)va_arg(ap, <span class="hljs-type">char</span> *);<br>print_str(out, data, s, width, ladjust);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\0&#x27;</span>:<br>fmt--;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">/* output this char as it is */</span><br>out(data, fmt, <span class="hljs-number">1</span>);<br>&#125;<br>fmt++;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* --------------- local help functions --------------------- */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_char</span><span class="hljs-params">(<span class="hljs-type">fmt_callback_t</span> out, <span class="hljs-type">void</span> *data, <span class="hljs-type">char</span> c, <span class="hljs-type">int</span> length, <span class="hljs-type">int</span> ladjust)</span> &#123;<br><span class="hljs-type">int</span> i;<br><br><span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">1</span>) &#123;<br>length = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> space = <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">if</span> (ladjust) &#123;<br>out(data, &amp;c, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; length; i++) &#123;<br>out(data, &amp;space, <span class="hljs-number">1</span>);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length - <span class="hljs-number">1</span>; i++) &#123;<br>out(data, &amp;space, <span class="hljs-number">1</span>);<br>&#125;<br>out(data, &amp;c, <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_str</span><span class="hljs-params">(<span class="hljs-type">fmt_callback_t</span> out, <span class="hljs-type">void</span> *data, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> length, <span class="hljs-type">int</span> ladjust)</span> &#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *s1 = s;<br><span class="hljs-keyword">while</span> (*s1++) &#123;<br>len++;<br>&#125;<br><span class="hljs-keyword">if</span> (length &lt; len) &#123;<br>length = len;<br>&#125;<br><br><span class="hljs-keyword">if</span> (ladjust) &#123;<br>out(data, s, len);<br><span class="hljs-keyword">for</span> (i = len; i &lt; length; i++) &#123;<br>out(data, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-number">1</span>);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length - len; i++) &#123;<br>out(data, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-number">1</span>);<br>&#125;<br>out(data, s, len);<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_num</span><span class="hljs-params">(<span class="hljs-type">fmt_callback_t</span> out, <span class="hljs-type">void</span> *data, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> u, <span class="hljs-type">int</span> base, <span class="hljs-type">int</span> neg_flag, <span class="hljs-type">int</span> length,</span><br><span class="hljs-params">       <span class="hljs-type">int</span> ladjust, <span class="hljs-type">char</span> padc, <span class="hljs-type">int</span> upcase)</span> &#123;<br><span class="hljs-comment">/* algorithm :</span><br><span class="hljs-comment"> *  1. prints the number from left to right in reverse form.</span><br><span class="hljs-comment"> *  2. fill the remaining spaces with padc if length is longer than</span><br><span class="hljs-comment"> *     the actual length</span><br><span class="hljs-comment"> *     TRICKY : if left adjusted, no &quot;0&quot; padding.</span><br><span class="hljs-comment"> *    if negtive, insert  &quot;0&quot; padding between &quot;0&quot; and number.</span><br><span class="hljs-comment"> *  3. if (!ladjust) we reverse the whole string including paddings</span><br><span class="hljs-comment"> *  4. otherwise we only reverse the actual string representing the num.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">int</span> actualLength = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> buf[length + <span class="hljs-number">70</span>];<br><span class="hljs-type">char</span> *p = buf;<br><span class="hljs-type">int</span> i;<br><br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-type">int</span> tmp = u % base;<br><span class="hljs-keyword">if</span> (tmp &lt;= <span class="hljs-number">9</span>) &#123;<br>*p++ = <span class="hljs-string">&#x27;0&#x27;</span> + tmp;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (upcase) &#123;<br>*p++ = <span class="hljs-string">&#x27;A&#x27;</span> + tmp - <span class="hljs-number">10</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>*p++ = <span class="hljs-string">&#x27;a&#x27;</span> + tmp - <span class="hljs-number">10</span>;<br>&#125;<br>u /= base;<br>&#125; <span class="hljs-keyword">while</span> (u != <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (neg_flag) &#123;<br>*p++ = <span class="hljs-string">&#x27;-&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">/* figure out actual length and adjust the maximum length */</span><br>actualLength = p - buf;<br><span class="hljs-keyword">if</span> (length &lt; actualLength) &#123;<br>length = actualLength;<br>&#125;<br><br><span class="hljs-comment">/* add padding */</span><br><span class="hljs-keyword">if</span> (ladjust) &#123;<br>padc = <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (neg_flag &amp;&amp; !ladjust &amp;&amp; (padc == <span class="hljs-string">&#x27;0&#x27;</span>)) &#123;<br><span class="hljs-keyword">for</span> (i = actualLength - <span class="hljs-number">1</span>; i &lt; length - <span class="hljs-number">1</span>; i++) &#123;<br>buf[i] = padc;<br>&#125;<br>buf[length - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;-&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (i = actualLength; i &lt; length; i++) &#123;<br>buf[i] = padc;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* prepare to reverse the string */</span><br><span class="hljs-type">int</span> begin = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> end;<br><span class="hljs-keyword">if</span> (ladjust) &#123;<br>end = actualLength - <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>end = length - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/* adjust the string pointer */</span><br><span class="hljs-keyword">while</span> (end &gt; begin) &#123;<br><span class="hljs-type">char</span> tmp = buf[begin];<br>buf[begin] = buf[end];<br>buf[end] = tmp;<br>begin++;<br>end--;<br>&#125;<br><br>out(data, buf, length);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>唔，第一次写博客，就随便写了，好多东西是比较随性的，看到哪里想到哪里的，如果有不正确和不准确不完善的地方，请各位大佬联系我。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
